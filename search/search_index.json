{
    "docs": [
        {
            "location": "/",
            "text": "Expressive Authorization middleware\n\n\n\n\n\n\nZend-expressive-authorization provides middleware for \nExpressive\n\nand \nPSR-7\n applications for authorizing\nspecific routes based on \nACL\n\nor \nRBAC\n systems.\n\n\nInstallation\n\n\nYou can install the zend-expressive-authorization library with\n\nComposer\n:\n\n\n$ composer require zendframework/zend-expressive-authorization\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "Home"
        },
        {
            "location": "/#expressive-authorization-middleware",
            "text": "Zend-expressive-authorization provides middleware for  Expressive \nand  PSR-7  applications for authorizing\nspecific routes based on  ACL \nor  RBAC  systems.",
            "title": "Expressive Authorization middleware"
        },
        {
            "location": "/#installation",
            "text": "You can install the zend-expressive-authorization library with Composer :  $ composer require zendframework/zend-expressive-authorization",
            "title": "Installation"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/v1/intro/",
            "text": "Introduction\n\n\nThis component provides authorization middleware for \nPSR-7\n\nand \nPSR-15\n applications.\n\n\nAn authorization system first needs authentication: to verify that an identity\nhas access to something (i.e., is authorized) we first need the \nidentity\n, which\nis provided during authentication.\n\n\nAuthentication is provided via the package\n\nzend-expressive-authentication\n.\nThat library provides an \nAuthenticationMiddleware\n class that verify\ncredentials using the HTTP request, and stores the identity via a\n\nPSR-7 request attribute\n.\n\n\nThe identity generated by zend-expressive-authentication is stored as the\nrequest attribute \nZend\\Expressive\\Authentication\\UserInterface\n as a\n\nUserInterface\n implementation. That interface looks like the following:\n\n\nnamespace Zend\\Expressive\\Authentication;\n\ninterface UserInterface\n{\n    /**\n     * Get the unique user identity (id, username, email address or ...)\n     */\n    public function getIdentity() : string;\n\n    /**\n     * Get all user roles\n     *\n     * @return Iterable\n     */\n    public function getRoles() : iterable;\n\n    /**\n     * Get a detail $name if present, $default otherwise\n     */\n    public function getDetail(string $name, $default = null);\n\n    /**\n     * Get all the details, if any\n     */\n    public function getDetails() : array;\n}\n\n\n\nzend-expressive-authorization consumes this identity attribute.  It checks if a\nuser's role (as retrieved from the \nUserInterface\n object) is authorized\n(granted) to the perform the current HTTP request.\n\n\nAuthorization is performed using the \nisGranted()\n method of the\n\nAuthorizationInterface\n.\n\n\nWe offer two adapters:\n\n\n\n\nzend-expressive-authorization-rbac\n,\n  which implements Role-Based Access Controls (\nRBAC\n)\n\n\nzend-expressive-authorization-acl\n,\n  which implements an Access Control List (\nACL\n).\n\n\n\n\n\n\nIf you want to know more about authentication using middleware in PHP,\nwe suggest reading the blog post \n\"Authorize users using Middleware\"\n.",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#introduction",
            "text": "This component provides authorization middleware for  PSR-7 \nand  PSR-15  applications.  An authorization system first needs authentication: to verify that an identity\nhas access to something (i.e., is authorized) we first need the  identity , which\nis provided during authentication.  Authentication is provided via the package zend-expressive-authentication .\nThat library provides an  AuthenticationMiddleware  class that verify\ncredentials using the HTTP request, and stores the identity via a PSR-7 request attribute .  The identity generated by zend-expressive-authentication is stored as the\nrequest attribute  Zend\\Expressive\\Authentication\\UserInterface  as a UserInterface  implementation. That interface looks like the following:  namespace Zend\\Expressive\\Authentication;\n\ninterface UserInterface\n{\n    /**\n     * Get the unique user identity (id, username, email address or ...)\n     */\n    public function getIdentity() : string;\n\n    /**\n     * Get all user roles\n     *\n     * @return Iterable\n     */\n    public function getRoles() : iterable;\n\n    /**\n     * Get a detail $name if present, $default otherwise\n     */\n    public function getDetail(string $name, $default = null);\n\n    /**\n     * Get all the details, if any\n     */\n    public function getDetails() : array;\n}  zend-expressive-authorization consumes this identity attribute.  It checks if a\nuser's role (as retrieved from the  UserInterface  object) is authorized\n(granted) to the perform the current HTTP request.  Authorization is performed using the  isGranted()  method of the AuthorizationInterface .  We offer two adapters:   zend-expressive-authorization-rbac ,\n  which implements Role-Based Access Controls ( RBAC )  zend-expressive-authorization-acl ,\n  which implements an Access Control List ( ACL ).    If you want to know more about authentication using middleware in PHP,\nwe suggest reading the blog post  \"Authorize users using Middleware\" .",
            "title": "Introduction"
        },
        {
            "location": "/v1/auth-adapter/",
            "text": "Authorization adapters\n\n\nYou can configure the authorization adapter to use via your service container\nconfiguration. Specifically, you can either map the service name\n\nZend\\Expressive\\Authorization\\AuthorizationInterface\n to a factory, or alias it\nto the appropriate service.\n\n\nFor instance, using \nExpressive container configuration\n,\nyou could select the zend-expressive-authorization-acl adapter in either of the\nfollowing ways:\n\n\n\n\n\n\nUsing an alias:\n  \nuse Zend\\Expressive\\Authorization\\AuthorizationInterface;\nuse Zend\\Expressive\\Authorization\\Acl\\ZendAcl;\n\nreturn [\n    'dependencies' => [\n        // Using an alias:\n        'aliases' => [\n            AuthorizationInterface::class => ZendAcl::class,\n        ],\n    ],\n];\n\n\n\n\n\n\nMapping to a factory:\n  \nuse Zend\\Expressive\\Authorization\\AuthorizationInterface;\nuse Zend\\Expressive\\Authorization\\Acl\\ZendAclFactory;\n\nreturn [\n    'dependencies' => [\n        // Using a factory:\n        'factories' => [\n            AuthorizationInterface::class => ZendAclFactory::class,\n        ],\n    ],\n];\n\n\n\n\n\n\nWe provide two different adapters.\n\n\n\n\nThe RBAC adapter is provided by \nzend-expressive-authorization-rbac\n.\n\n\nThe ACL adapter is provided by \nzend-expressive-authorization-acl\n.\n\n\n\n\nEach adapter is installable via \nComposer\n:\n\n\n$ composer require zendframework/zend-expressive-authorization-rbac\n# or\n$ composer require zendframework/zend-expressive-authorization-acl\n\n\n\nIn each adapter, we use the \nroute name\n as the resource. This means you\ncan specify if a role is authorized to access a specific HTTP \nroute\n.\nHowever, this is just one approach to implementing an authorization system; you\ncan create your own system by implementing the\n\nAuthorizationInterface\n.\n\n\nFor more information on the adapters, please read the\n\nRBAC documentation\n\nand the \nACL documentation\n.",
            "title": "Authorization adapters"
        },
        {
            "location": "/v1/auth-adapter/#authorization-adapters",
            "text": "You can configure the authorization adapter to use via your service container\nconfiguration. Specifically, you can either map the service name Zend\\Expressive\\Authorization\\AuthorizationInterface  to a factory, or alias it\nto the appropriate service.  For instance, using  Expressive container configuration ,\nyou could select the zend-expressive-authorization-acl adapter in either of the\nfollowing ways:    Using an alias:\n   use Zend\\Expressive\\Authorization\\AuthorizationInterface;\nuse Zend\\Expressive\\Authorization\\Acl\\ZendAcl;\n\nreturn [\n    'dependencies' => [\n        // Using an alias:\n        'aliases' => [\n            AuthorizationInterface::class => ZendAcl::class,\n        ],\n    ],\n];    Mapping to a factory:\n   use Zend\\Expressive\\Authorization\\AuthorizationInterface;\nuse Zend\\Expressive\\Authorization\\Acl\\ZendAclFactory;\n\nreturn [\n    'dependencies' => [\n        // Using a factory:\n        'factories' => [\n            AuthorizationInterface::class => ZendAclFactory::class,\n        ],\n    ],\n];    We provide two different adapters.   The RBAC adapter is provided by  zend-expressive-authorization-rbac .  The ACL adapter is provided by  zend-expressive-authorization-acl .   Each adapter is installable via  Composer :  $ composer require zendframework/zend-expressive-authorization-rbac\n# or\n$ composer require zendframework/zend-expressive-authorization-acl  In each adapter, we use the  route name  as the resource. This means you\ncan specify if a role is authorized to access a specific HTTP  route .\nHowever, this is just one approach to implementing an authorization system; you\ncan create your own system by implementing the AuthorizationInterface .  For more information on the adapters, please read the RBAC documentation \nand the  ACL documentation .",
            "title": "Authorization adapters"
        }
    ]
}